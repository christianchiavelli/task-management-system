# üê≥ Backend Dockerfile - NestJS + TypeScript
# Multi-stage build para otimizar o tamanho final

# =====================================
# STAGE 1: Dependencies (Base)
# =====================================
FROM node:20-alpine AS base
WORKDIR /app

# Instalar depend√™ncias do sistema necess√°rias
RUN apk add --no-cache libc6-compat

# Copiar package files
COPY package*.json ./

# =====================================
# STAGE 2: Dependencies (Development)
# =====================================
FROM base AS deps
# Instalar todas as depend√™ncias (dev + prod)
RUN npm ci

# =====================================
# STAGE 3: Build
# =====================================
FROM base AS build
WORKDIR /app

# Copiar depend√™ncias do stage anterior
COPY --from=deps /app/node_modules ./node_modules

# Copiar c√≥digo fonte
COPY . .

# Build da aplica√ß√£o
RUN npm run build

# =====================================
# STAGE 4: Production
# =====================================
FROM node:20-alpine AS production
WORKDIR /app

# Criar usu√°rio n√£o-root para seguran√ßa
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nestjs

# Instalar apenas depend√™ncias de produ√ß√£o
COPY package*.json ./
RUN npm ci --only=production --ignore-scripts

# Copiar build da aplica√ß√£o
COPY --from=build --chown=nestjs:nodejs /app/dist ./dist

# Mudar para usu√°rio n√£o-root
USER nestjs

# Expor porta
EXPOSE 3001

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "http.get('http://localhost:3001/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1))"

# Comando para iniciar a aplica√ß√£o
CMD ["node", "dist/main.js"]